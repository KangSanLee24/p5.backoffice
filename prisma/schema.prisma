// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId               Int        @id                @default(autoincrement()) @map("user_id")
  email                String     @map("email")
  name                 String     @map("name")
  password             String     @map("password")
  phone                String     @map("phone")
  address               String
  point                Int        @default(1000000)  
  grade                Grade_Type @default(A)        
  role                 Role       @default(CUSTOMER) 
  createdAt            DateTime   @default(now())    @map("created_at")
  updatedAt            DateTime   @updatedAt         @map("updated_at")
  isDeleted            Boolean    @default(false)     @map("is_deleted")
  isEmailValid         Boolean    @default(false)    @map("is_email_valid")

  userIdToRefreshToken RefreshToken?
  userIdToOrders       Orders[]
  userIdToDibs         Dibs[]
  userIdToCeoReviews   CeoReviews?
  userIdToReviews      Reviews[]

  @@map("users")
}

enum Role {
  CUSTOMER
  MANAGER
}

enum Grade_Type {
  A //   고마운분
  B //   귀한분
  C //   더귀한분
  D //   천생연분
}

model RefreshToken {
  tokenId       Int      @id               @default(autoincrement()) @map("token_id")
  userId        Int      @unique           @map("user_id")
  refreshToken  String   @map("refresh_token")
  createdAt     DateTime @default(now())   @map("created_at")
  updatedAt     DateTime @updatedAt        @map("updated_at")

  userIdByUsers Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("refreshtoken")
}

model Orders {
  orderId         Int             @id @default(autoincrement()) @map("order_id")
  storeId         Int                               @map("store_id")
  userId          Int                               @map("user_id")
  menuId          Int                               @map("menu_id")
  paymentMethod   Payment_Method                    @map("payment_method")
  totalPrice      Int                               @map("total_price")
  requests        String
  createdAt       DateTime        @default(now())   @map("created_at")
  updatedAt       DateTime        @updatedAt        @map("updated_at")
  status          Order_Status    @default(WAITING)

  storeIdByStores Stores          @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  userIdByUsers   Users           @relation(fields: [userId], references: [userId],  onDelete: Cascade)
  menuIdByMenus   Menus           @relation(fields: [menuId], references: [menuId],  onDelete: Cascade)

  @@map("orders")
}

enum Payment_Method {
  CASH // 현금
  CARD // 카드
}

enum Order_Status {
  WAITING
  PREPARING
  DELIVERING
  COMPLETE
}

model Stores {
  storeId          Int         @id @default(autoincrement()) @map("store_id")
  name	           String
  category         String
  address          String
  storePictureUrl  String      @db.Text        @map("store_picture_url")
  phone            String
  dibsCount        Int                         @map("dibs_count")
  reviewCount      Int                         @map("review_count")
  deliveryAddress  String                      @map("delivery_address")
  status           StoreStatus @default(OPEN)
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt      @map("updated_at")

  storeIdToDibs    Dibs[]
  storeIdToOrders  Orders[]
  storeIdToMenus   Menus[]
  storeIdToReviews Reviews[]

  @@map("stores")
}

enum StoreStatus {
  OPEN
  CLOSE
}

model Dibs{
  dibsId             Int        @id @default(autoincrement()) @map("dibs_id")
  storeId            Int                          @map("store_id")
  userId             Int                          @map("user_id")
  createdAt          DateTime   @default(now())   @map("created_at")
  updatedAt          DateTime   @updatedAt        @map("updated_at")

  userIdByUsers      Users      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  storeIdByStores    Stores     @relation(fields: [storeId], references: [storeId], onDelete: Cascade)

  @@map("dibs")
}

model CeoReviews{
  ceoReviewId        Int        @id @default(autoincrement()) @map("ceo_review_id")
  reviewId           Int        @unique           @map("review_id")
  userId             Int        @unique           @map("user_id")
  content            String
  createdAt          DateTime   @default(now())   @map("created_at")
  updatedAt          DateTime   @updatedAt        @map("updated_at")

  userIdByUsers      Users      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  reviewIdByReviews  Reviews    @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)

  @@map("ceo_reviews")
}

model Menus {
  menuId          Int        @id @default(autoincrement()) @map("menu_id")
  storeId         Int        @map("store_id") 
  name            String 
  price           Int
  imgUrl          String     @db.Text          @map("img_url")
  popularity      Int
  status          menuStatus @default(SALE)
  createdAt       DateTime   @default(now())   @map("created_at")
  updatedAt       DateTime   @updatedAt        @map("updated_at")

  storeIdByStores Stores     @relation(fields: [storeId], references: [storeId], onDelete: Cascade)

  menuIdToOrders  Orders[]
}

enum menuStatus {
  SALE
  SOLE_OUT
}

model Reviews {
  reviewId             Int      @id @default(autoincrement()) @map("review_id")
  userId               Int      @map("user_id")
  storeId              Int      @map("store_id")
  rating               Int
  content              String
  imgUrl               String   @db.Text          @map("img_url")
  createdAt            DateTime @default(now())   @map("created_at")
  updatedAt            DateTime @updatedAt        @map("updated_at")

  userIdByUsers        Users    @relation(fields: [userId], references: [userId],  onDelete: Cascade)
  storeIdByStores      Stores   @relation(fields: [storeId], references: [storeId], onDelete: Cascade)

  reviewIdToCeoReviews CeoReviews?
}
